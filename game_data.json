{"name": "Lean Maze game", "version": "3.0.0", "languages": ["en"], "translated_name": "0", "devmode": false, "library_zip_fn": "Lean Maze game-3.0.0-library.zip", "introData": {"name": "", "problemIndex": -1, "objects": [{"type": "text", "content": "1"}]}, "worlds": [{"name": "2", "levels": [{"name": "", "problemIndex": 4, "objects": [{"type": "lean", "content": "3", "hidden": false}, {"type": "text", "content": "4"}, {"type": "lean", "content": "5", "hidden": true}, {"type": "text", "content": "6"}, {"type": "lemma", "text": "7", "lean": "lemma can_escape_example_maze : (mk 0).can_escape :=\n", "sideBar": false, "firstProofLineNumber": 33, "lastProofLineNumber": 39, "textBefore": "-- import the definition of the example maze\nimport mazes.example_maze.definition\n\n/-\n# Maze 1 : Example maze.\n\nYou are in a maze of twisty passages, all distinct! \n\nYou can go north, south east or west.\n-/\n\nnamespace maze -- hide\n\n/- \nThere are 5 rooms. Rooms are called 0, 1, 2, 3 and 4, with 0 being\nwhere you start and 4 being the exit.\n\n\nUse `n`, `s`, `e`, `w` to move around. When you're at the exit, type `out`.\n\n  Don't forget the commas.\n  Don't bang into the walls -- those are errors.\n  When you get to room 4, the tactic to get you out is `out`. \n  There is also a magic word, rumoured to be\n  an ancient translation of the word `sorry`.\n-/\n\n/- Lemma : no-side-bar\nSee if you can get out of this maze.\n-/\nlemma can_escape_example_maze : (mk 0).can_escape :=\nbegin\n", "proof": "  xyzzy,\n\n\n\n\n\n", "proof_hint": "sorry", "textAfter": "\nend\n\nend maze\n", "height": 7, "editorText": "sorry", "lineOffset": 32, "name": "can_escape_example_maze", "statement": "(mk 0).can_escape"}, {"type": "lean", "content": "8", "hidden": false}]}, {"name": "", "problemIndex": 2, "objects": [{"type": "lean", "content": "9", "hidden": false}, {"type": "text", "content": "10"}, {"type": "lemma", "text": "11", "lean": "example : goal :=\n", "sideBar": false, "firstProofLineNumber": 27, "lastProofLineNumber": 34, "textBefore": "-- import the definition of the maze surrounded by fore\nimport mazes.maze_with_fire.solutions.definition\nnamespace maze\n\n/-\n\n# Maze with fire.\n\nYou are in a maze of twisty passages, all distinct. \n\nYou can go north, south east or west.\n\nIf you fall into the fire, you will end up in the room of death,\nroom 5, from which there is no escape.\n\nSolver remark : there are 6 rooms.\n\nUse `n`, `s`,`e`, `w` to move around. The exit is room `4`.\nWhen you're at the exit, type `out`.\n-/\n\n/- Lemma : no-side-bar\nCan you solve this maze?\n-/\nexample : goal :=\nbegin\n", "proof": "  -- ready...\n  unfold goal,\n  -- go!\n  e,\n  n,\n  e,\n  e,\n  out,", "proof_hint": "sorry", "textAfter": "\nend\n\nend maze\n", "height": 8, "editorText": "sorry", "lineOffset": 26, "name": "", "statement": "goal"}, {"type": "lean", "content": "12", "hidden": false}]}, {"name": "", "problemIndex": 2, "objects": [{"type": "lean", "content": "13", "hidden": false}, {"type": "text", "content": "14"}, {"type": "lemma", "text": "15", "lean": "lemma solve : can_escape A :=\n", "sideBar": false, "firstProofLineNumber": 25, "lastProofLineNumber": 32, "textBefore": "-- import the definition of the non-euclidean maze\nimport mazes.noneuclidean_maze.solutions.definition\nopen maze direction\n\n/-\n\n# Non-euclidean maze.\n\nYou are in a maze of twisty passages, all distinct. \n\nYou can go north, south east or west.\n\nIf you hit the wall there's an error.\n\nWhen you're at the exit (room `J`), type `out`.\n\nSolver remark : there are 10 rooms.\n-/\n\n/- Lemma : no-side-bar\nCan you escape from this non-Euclidean maze?\n-/\nlemma solve : can_escape A :=\nbegin\n", "proof": "  s,s,e,e,w,w,out,\n\n\n\n\n\n\n", "proof_hint": "sorry", "textAfter": "\nend\n", "height": 8, "editorText": "sorry", "lineOffset": 24, "name": "solve", "statement": "can_escape A"}]}, {"name": "", "problemIndex": 2, "objects": [{"type": "lean", "content": "16", "hidden": false}, {"type": "text", "content": "17"}, {"type": "lemma", "text": "18", "lean": "example : can_escape 8 13 0 :=\n", "sideBar": false, "firstProofLineNumber": 28, "lastProofLineNumber": 30, "textBefore": "-- import the definition of the gcd maze\nimport mazes.gcd_maze.definition\nimport data.int.gcd\nopen maze direction\n\n/-\n\n# Bezout's Theorem Example maze.\n\nYou are in a maze of integers, all distinct. \n\nYou can go north, south east or west.\n\nNorth adds 8 to your integer, South subtracts 8.\nEast adds 13 to your integer, West subtracts 13\n\nThe exit is at 1, the gcd of 8 and 5.\nWhen you're at the exit, type `out`.\n\nSolver remark : there are infinitely many rooms.\n-/\n\n/- Lemma : no-side-bar\nCan you prove this case of Bezout's Theorem?\n-/\nexample : can_escape 8 13 0 :=\nbegin\n", "proof": "  iterate 5 {n},\n  iterate 3 {w},\n  out", "proof_hint": "sorry", "textAfter": "\nend\n\n-- #eval nat.xgcd 8 13 -- (2, -3) -- hide", "height": 3, "editorText": "sorry", "lineOffset": 27, "name": "", "statement": "can_escape 8 13 0"}, {"type": "lean", "content": "19", "hidden": true}]}, {"name": "", "problemIndex": 2, "objects": [{"type": "lean", "content": "20", "hidden": false}, {"type": "text", "content": "21"}, {"type": "lemma", "text": "22", "lean": "theorem challenge (A B : \u2115) : can_escape A B 0 :=\n", "sideBar": false, "firstProofLineNumber": 27, "lastProofLineNumber": 83, "textBefore": "-- import the definition of the gcd maze\nimport mazes.gcd_maze.definition\nimport data.int.gcd\nopen maze direction\n\n/-\n\n# Prove Bezout's Theorem\n\nYou are in a maze of integers, all distinct. \n\nYou can go north, south east or west.\n\nNorth adds `a` to your integer, South subtracts `a`.\nEast adds `b` to your integer, West subtracts `b`.\nYou start at 0. The exit is at `nat.gcd a b`.\nCan you prove you can always exit?\n\nSolver remark : there are infinitely many mazes.\n-/\n\n/- Lemma : no-side-bar\nCan you prove you can escape in the general case?\n-/\ntheorem challenge (A B : \u2115) : can_escape A B 0 :=\nbegin\n", "proof": "  have solution : can_escape A B (nat.gcd A B),\n    out,\n  have hs : \u2200 t l : \u2115, can_escape A B t \u2192 can_escape A B (t + l*A),\n  { intros t l,\n    induction l with d hd,\n    { intro h, convert h, simp },\n    intro h,\n    specialize hd h,\n    s,\n    convert hd,\n    ring\n  },\n  have hns : \u2200 t : \u2124, \u2200 l : \u2124, can_escape A B t \u2192 can_escape A B (t + l * A),\n  { intros t l,\n    apply int.induction_on l; clear l,\n    { intro h, convert h, ring},\n    { intros d hd, \n      intro h, specialize hd h,\n      s,\n      convert hd,\n      ring,\n    },\n    { intros d hd, \n      intro h, specialize hd h,\n      n,\n      convert hd using 1,\n      ring,\n    } },\n  have hew : \u2200 t : \u2124, \u2200 m : \u2124, can_escape A B t \u2192 can_escape A B (t + m * B),\n  { intros t l,\n    apply int.induction_on l; clear l,\n    { intro h, convert h, ring},\n    { intros d hd, \n      intro h, specialize hd h,\n      w,\n      convert hd,\n      ring,\n    },\n    { intros d hd, \n      intro h, specialize hd h,\n      e,\n      convert hd using 1,\n      ring,\n    } },\n  suffices : \u2203 L M : \u2124, L * A + M * B = nat.gcd A B,\n  { rcases this with \u27e8L, M, h\u27e9,\n    rw \u2190 h at solution,\n    specialize hew _ (-M) solution,\n    simp at hew,\n    specialize hns _ (-L) hew,\n    convert hns,\n    ring,\n  },\n  have h := nat.gcd_eq_gcd_ab A B,\n  rw h,\n  use [A.gcd_a B, A.gcd_b B],\n  ring,", "proof_hint": "sorry", "textAfter": "\nend\n\n", "height": 57, "editorText": "sorry", "lineOffset": 26, "name": "challenge", "statement": "(A B : \u2115) : can_escape A B 0"}]}]}], "texts": [["Lean Maze game", "# The Maze Game, version 1.3.0.\n\n## By Kevin Buzzard \n\nAn idea coming out of discussions with Kendall Frey.\n\n# What is this game?\n\nFour mazes and a theorem (which I must confess I haven't yet proved).\n\nYou are in a maze of twisty passages, all distinct (at this point).\nUse the tactics `n`, `s`, `e`, `w` to escape.\nUse the `out` tactic to get out when you're at the exit room.\n\n# Credits\n\nThe Maze Game is brought to you by the Xena project, a project based at Imperial College London\nwhose aim is to get mathematics undergraduates using computer theorem provers.\nLean is a computer theorem prover being developed at Microsoft Research.\n\nProve a theorem. Write a function. <a href=\"https://twitter.com/XenaProject\" target=\"blank\">@XenaProject</a>.\n", "Four mazes", "-- import the definition of the example maze\nimport mazes.example_maze.definition\n", "# Maze 1 : Example maze.\n\nYou are in a maze of twisty passages, all distinct! \n\nYou can go north, south east or west.\n", "namespace maze -- hide\n", "There are 5 rooms. Rooms are called 0, 1, 2, 3 and 4, with 0 being\nwhere you start and 4 being the exit.\n\n\nUse `n`, `s`, `e`, `w` to move around. When you're at the exit, type `out`.\n\n  Don't forget the commas.\n  Don't bang into the walls -- those are errors.\n  When you get to room 4, the tactic to get you out is `out`. \n  There is also a magic word, rumoured to be\n  an ancient translation of the word `sorry`.\n", "See if you can get out of this maze.\n", "end maze\n", "-- import the definition of the maze surrounded by fore\nimport mazes.maze_with_fire.solutions.definition\nnamespace maze\n", "\n# Maze with fire.\n\nYou are in a maze of twisty passages, all distinct. \n\nYou can go north, south east or west.\n\nIf you fall into the fire, you will end up in the room of death,\nroom 5, from which there is no escape.\n\nSolver remark : there are 6 rooms.\n\nUse `n`, `s`,`e`, `w` to move around. The exit is room `4`.\nWhen you're at the exit, type `out`.\n", "Can you solve this maze?\n", "end maze\n", "-- import the definition of the non-euclidean maze\nimport mazes.noneuclidean_maze.solutions.definition\nopen maze direction\n", "\n# Non-euclidean maze.\n\nYou are in a maze of twisty passages, all distinct. \n\nYou can go north, south east or west.\n\nIf you hit the wall there's an error.\n\nWhen you're at the exit (room `J`), type `out`.\n\nSolver remark : there are 10 rooms.\n", "Can you escape from this non-Euclidean maze?\n", "-- import the definition of the gcd maze\nimport mazes.gcd_maze.definition\nimport data.int.gcd\nopen maze direction\n", "\n# Bezout's Theorem Example maze.\n\nYou are in a maze of integers, all distinct. \n\nYou can go north, south east or west.\n\nNorth adds 8 to your integer, South subtracts 8.\nEast adds 13 to your integer, West subtracts 13\n\nThe exit is at 1, the gcd of 8 and 5.\nWhen you're at the exit, type `out`.\n\nSolver remark : there are infinitely many rooms.\n", "Can you prove this case of Bezout's Theorem?\n", "-- #eval nat.xgcd 8 13 -- (2, -3) -- hide", "-- import the definition of the gcd maze\nimport mazes.gcd_maze.definition\nimport data.int.gcd\nopen maze direction\n", "\n# Prove Bezout's Theorem\n\nYou are in a maze of integers, all distinct. \n\nYou can go north, south east or west.\n\nNorth adds `a` to your integer, South subtracts `a`.\nEast adds `b` to your integer, West subtracts `b`.\nYou start at 0. The exit is at `nat.gcd a b`.\nCan you prove you can always exit?\n\nSolver remark : there are infinitely many mazes.\n", "Can you prove you can escape in the general case?\n"]]}